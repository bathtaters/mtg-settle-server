extends components/container

include components/mixins

block scripts
  script(src="/js/game.client.js")

block content
  .container
    .row.nowrap.relative
      if prev
        .col: a.button.small(href=gameURL+prev) PREV
      .col-sm.center.responsive-padding
        h3.m-0 Game: #{game.date} #{isLocked ? ' ðŸ”’' : ''}
        a.small.m-0(href=baseURL) Back
      if next
        .col: a.button.small(href=gameURL+next) NEXT

    h4.row.baseline.relative
      b Solution:
      span &nbsp;#{solution.name} [#{game.setCode}]
      if solution.block
        i &nbsp;(Block: #{solution.block})
      if game.art
        .col.svg-style.marginX!= game.art
    
    hr

    if !isLocked || isAdmin
      form.plain(method="POST" action=baseURL+urls.gui.manage.game+urls.gui.manage.form)
        fieldset
          legend Edit Game
          .row
            .input-group.vertical.button-input
              +formInput('date', 'hidden', null, game.date)

              label.tooltip(for="position" aria-label="Change a single card") Update one card:
              .button-group

                select#position(name="position")
                  each card in cards
                    option(for="position" value=card.idx) #{card.idx}: #{card.name}
                
                input.button(type="submit" name="_action" value=actions[0])
                
                select#newCard(name="newCard")
                  each card in allCards
                    option(for="newCard" value=card.id data-preview=cardImageURI(card))= card.name
                
                input.button#randomCard(type="button" value=actions[1])
                
                a.button#previewCard(target="_blank")= actions[2]
              
              .button-group
                select#swapA(name="swapA")
                  each card in cards
                    option(for="swapA" value=card.idx) #{card.idx}: #{card.name}
                input.button(type="submit" name="_action" value=actions[3])
                select#swapB(name="swapB")
                  each card in cards
                    option(selected=(card.idx === 1) for="swapB" value=card.idx) #{card.idx}: #{card.name}
          
          .row
            .input-group.vertical.button-input
              label.tooltip(aria-label="Randomize all cards OR set + cards") Randomize all:
              .button-group
                input.button(type="submit" value=actions[4] name="_action")
                input.button(type="submit" value=actions[5]  name="_action")

            +buttonInput(
              'newSet', allSets, actions[6], null, solution.setCode,
              null, 'Update solution:', 'Change the solution to a new set (w/ random cards)',
              '_action', 'submit'
            )

            .input-group.vertical.button-input
              label.tooltip(aria-label="Prevent additional editing for this game") Manage storage:
              .button-group
                if !isLocked
                  input.button(type="submit" value=actions[7] name="_action")
                else if isAdmin
                  input.button(type="submit" value=actions[8]  name="_action")
                if isAdmin
                  input.button(type="submit" value=actions[9]  name="_action")

            if csrfToken
              span: +formInput('_csrf', 'hidden', null, csrfToken)

      hr

    table.striped.horizontal.smallhdr
      caption Cards
      thead.cardDetail
        tr
          th Pos.
          th Name
          th.large Image
          th.cardDetail Detail
      tbody
        each card in cards
          tr.tableRow
            td(data-label='Position')= card.idx
            td(data-label='Name'): a(href=cardImageURI(card) target="_blank")= card.name
            td.large.cardImg(data-label='Image')
              a(href=(card.url && imageUrl(card.url, true)) target="_blank")
                img(
                  src=(card.url && imageUrl(card.url, true, { height: 0.5, width: 0.5 }))
                  alt=`Card ${card.idx}` id=`card${card.idx}`
                  title=`Card ${card.idx}` crossorigin=true
                )
            td.cardDetail(data-label='Detail')
              div= card.type
              div: i Artist: #{card.artist}
              .imgDetail Size unknown
